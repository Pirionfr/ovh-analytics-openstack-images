---
- name: Load HDP variables
  include_vars: ../vars/hdp.yml

- name: Bootstrap Ambari
  import_tasks: prerequisites.yml

- name: Install git
  yum:
    name: git
    state: latest
  when: tachyon_service

- name: Get Tachyon Service
  git:
    repo: "https://github.com/seraphin/tachyon-service.git"
    dest: "/var/lib/ambari-server/resources/stacks/HDP/2.2/services/tachyon-service/"
    force: yes
  when: tachyon_service


# ensure that blueprint doesn't exist for idempotence
- name: Make sure the pre-warm blueprint doesn't already exist
  uri:
    url: "http://{{ ansible_nodename }}:8080/api/v1/blueprints/prewarm"
    method: DELETE
    force_basic_auth: yes
    user: admin
    password: admin
    headers:
      X-Requested-By: "ambari"
    status_code: 200,201,202,404
  ignore_errors: true
  register: current_blueprint

- name: Register the pre-warm blueprint with the Ambari server
  uri:
    url: http://{{ ansible_nodename }}:8080/api/v1/blueprints/prewarm?validate_topology=false
    method: POST
    force_basic_auth: yes
    user: admin
    password: admin
    headers:
      X-Requested-By: "ambari"
      Content-Type: "text/plain" # blueprint is a JSON sent as a string
    body_format: json
    body: "{{ lookup('template', 'blueprint.j2') }}"
    status_code: 200,201,202,404

# ensure that cluster doesn't exist for idempotence
- name: Check if a pre-warm cluster already exists
  uri:
    url: "http://{{ ansible_nodename }}:8080/api/v1/clusters/prewarm"
    method: GET
    force_basic_auth: yes
    user: admin
    password: admin
    headers:
      X-Requested-By: "ambari"
    status_code: 200,201,202,404
  register: current_cluster

- name: Create the cluster instance
  uri:
    url: http://{{ ansible_nodename }}:8080/api/v1/clusters/prewarm
    method: POST
    force_basic_auth: yes
    user: admin
    password: admin
    headers:
      X-Requested-By: "ambari"
      Content-Type: "text/plain" # template is a JSON sent as a string
    body_format: json
    body: "{{ lookup('template', 'template.j2') }}"
    status_code: 200,201,202
  when: current_cluster.status==404

- name: Wait for the cluster to be built
  uri:
    url: "http://{{ ansible_nodename }}:8080/api/v1/clusters/prewarm/requests/1"
    method: GET
    force_basic_auth: yes
    user: admin
    password: admin
    headers:
      X-Requested-By: "ambari"
    status_code: 200,201,202
    return_content: yes
  register: cluster_create_task
  until: ((cluster_create_task.content | from_json).Requests.request_status == 'COMPLETED' or
         (cluster_create_task.content | from_json).Requests.request_status == 'FAILED' or
         (cluster_create_task.content | from_json).Requests.request_status == 'TIMEDOUT' or
         (cluster_create_task.content | from_json).Requests.request_status == 'ABORTED')
  retries: "{{ wait_timeout // 10 }}"
  delay: 10
  when: wait

- name: Fail if the cluster create task is in an error state
  fail:
    msg: "Failed to build the prewarm cluster. Status is {{ (cluster_create_task.content | from_json).Requests.request_status }}"
  when: wait and ((cluster_create_task.content | from_json).Requests.request_status == 'FAILED' or
         (cluster_create_task.content | from_json).Requests.request_status == 'TIMEDOUT' or
         (cluster_create_task.content | from_json).Requests.request_status == 'ABORTED')

- name: Kill Ambari agent
  command: pkill -f ambari_agent

- name: Kill Ambari server (1/2)
  command: ambari-server stop

- name: Kill Ambari server (2/2)
  command: pkill -f ambari-server

- name: Reset Ambari server
  command: ambari-server reset --verbose --silent

- name: Clean Ambari config
  command: cd /var/lib/ambari-agent/data/ && ls -1 | grep -v version | xargs rm -vf

