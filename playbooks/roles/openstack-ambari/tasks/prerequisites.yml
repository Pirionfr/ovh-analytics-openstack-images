---
- name: Download the Ambari repo
  get_url:
    url: "{{ ambari_repo }}"
    dest: "{{ ambari_repo_file }}"

- name: Add mysql repo (1/2)
  copy:
    src: mysql-community.repo
    dest: /etc/yum.repos.d/mysql-community.repo

- name: Add mysql repo (2/2)
  copy:
    src: RPM-GPG-KEY-mysql
    dest: /etc/pki/rpm-gpg/RPM-GPG-KEY-mysql

- name: Disable ssl
  lineinfile:
    path: /etc/python/cert-verification.cfg
    regexp: '^verify='
    line: 'verify=disable'

- name: Ensure required packages are installed (yum)
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items:
    - mysql-connector-java
    - MySQL-python
    - ambari-server
    - ambari-agent
    - mysql
  notify: Reload systemd

- meta: flush_handlers

- name: Configure the Ambari agent
  lineinfile:
    dest: /etc/ambari-agent/conf/ambari-agent.ini
    regexp: '^hostname\s*='
    line: "hostname=localhost"
    state: present
  notify: Restart ambari-agent

- name: Run Ambari Server setup
  shell: /usr/sbin/ambari-server setup --silent

- name: Make sure ambari-server is running
  service:
    name: ambari-server
    state: started
    enabled: yes

- name: Make sure that ambari-agent is running
  service:
    name: ambari-agent
    state: restarted
    enabled: yes

- name: Waiting for ambari-server to start listening on port 8080
  wait_for:
    host: "{{ ansible_nodename }}"
    port: 8080

- name: Waiting for ambari-agent to register
  uri:
    url: "http://{{ ansible_nodename }}:8080/api/v1/hosts/{{ ansible_nodename | lower }}"
    method: GET
    force_basic_auth: yes
    user: admin
    password: admin
    headers:
      X-Requested-By: "ambari"
    status_code: 200,201,202,404
  register: result
  until: "result.status != 404"
  retries: 200
  delay: 5

